package main

// https://github.com/go-telegram-bot-api/telegram-bot-api

// ------------------- IMPORTS -------------------
import (
	"fmt"

	"verus.pictura/src/db"
	"verus.pictura/src/logger"
	"verus.pictura/src/value"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	NewBot, BotErr = tgbotapi.NewBotAPI(value.BOT_TOKEN)
	OrderInfoMap   map[int64]*db.OrderInfo
	InputState     int = 0
)

func main() {
	// logger.ForString(fmt.Sprintf("OK, %v, %v", time.Now().Unix(), time.Now().Weekday()))
	logger.ForError(BotErr)

	// ------ WEBHOOK ------
	// setWebhook(NewBot)

	// updates := NewBot.ListenForWebhook("/" + NewBot.Token)
	// go http.ListenAndServeTLS("0.0.0.0:8443", "cert.pem", "key.pem", nil)

	// ------ STANDARD ------
	NewBot.Debug = true
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := NewBot.GetUpdatesChan(u)

	OrderInfoMap = make(map[int64]*db.OrderInfo)

	for update := range updates {

		if update.Message != nil {
			if update.Message.IsCommand() {
				checkCommand(update.Message)
			} else if InputState != 0 {
				switch InputState {
				case 1:
					OrderInfoMap[update.Message.Chat.ID].Email = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ì–æ—Ä–æ–¥,   –£–ª–∏—Ü–∞,   –î–æ–º,   –ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞_–¥–ª—è_—Å–≤—è–∑–∏")
					standardSendMessage(msg)
					InputState = 2

				case 2:
					OrderInfoMap[update.Message.Chat.ID].ContactInfo = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n–í–∞—à –∑–∞–∫–∞–∑:\n–ü—Ä–∏–Ω—Ç - "+OrderInfoMap[update.Message.Chat.ID].Print+"\n–†–∞–∑–º–µ—Ä - "+OrderInfoMap[update.Message.Chat.ID].Size+"\nEmail - "+OrderInfoMap[update.Message.Chat.ID].Email+"\n–î–æ—Å—Ç–∞–≤–∫–∞ - "+OrderInfoMap[update.Message.Chat.ID].ContactInfo)
					msg.ReplyMarkup = value.OrderPayment
					standardSendMessage(msg)

					InputState = 0
				}

			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(")
				standardSendMessage(msg)
			}
		}

		if update.CallbackQuery != nil {
			checkCallback(update.CallbackQuery)
		}
	}
}

func setWebhook(bot *tgbotapi.BotAPI) {
	webHookInfo, err := tgbotapi.NewWebhookWithCert(fmt.Sprintf("https://%s:%s/%s", value.BOT_ADDRESS, value.BOT_PORT, value.BOT_TOKEN), tgbotapi.FilePath(value.CERT_PATH))
	logger.ForError(err)
	_, err = bot.Request(webHookInfo)
	logger.ForError(err)
	info, err := bot.GetWebhookInfo()
	logger.ForError(err)
	if info.LastErrorDate != 0 {
		// logger.ForError(info.LastErrorMessage)
	}
}

func checkCommand(message *tgbotapi.Message) {
	if message.IsCommand() {
		switch message.Command() {

		case "start":
			msg := tgbotapi.NewMessage(message.Chat.ID, value.Menu)
			standardSendMessage(msg)

		case "show":
			sendPhotoOctopus(message.Chat.ID)
			msg := tgbotapi.NewMessage(message.Chat.ID, "Samurai Octopus üêô")
			NewBot.Send(msg)

			sendPhotoShrimp(message.Chat.ID)
			msg = tgbotapi.NewMessage(message.Chat.ID, "Samurai Shrimp ü¶ê")
			NewBot.Send(msg)

		case "price":
			msg := tgbotapi.NewMessage(message.Chat.ID, value.Price)
			standardSendMessage(msg)

		case "size":
			sendPhotoSize(message.Chat.ID)

		case "order":
			msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ –ª–∏–±–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
			msg.ReplyMarkup = value.OrderSystem
			standardSendMessage(msg)

		case "help":
			msg := tgbotapi.NewMessage(message.Chat.ID, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ...")
			standardSendMessage(msg)

			NewBot.Send(tgbotapi.NewMessage(value.WLANKASPER_ID, "PROBLEM @"+message.From.UserName))
			NewBot.Send(tgbotapi.NewMessage(value.ANASHARMS_ID, "PROBLEM @"+message.From.UserName))

		case "adminMod":
			if message.Chat.ID == value.WLANKASPER_ID || message.Chat.ID == value.ANASHARMS_ID {
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç –ù–∞—Å—Ç—å)")
				msg.ReplyMarkup = value.AdminSettings
				standardSendMessage(msg)
			}
		}
	}
}

func checkCallback(toCallback *tgbotapi.CallbackQuery) {
	switch toCallback.Data {

	case "telegram":
		standardCallbackCheck(*toCallback)

		OrderInfoMap[toCallback.Message.Chat.ID] = new(db.OrderInfo)
		OrderInfoMap[toCallback.Message.Chat.ID].UserName = toCallback.From.UserName

		msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–í—ã–±–∏—Ä–∞–π –∫–∞–∫–æ–π –ø—Ä–∏–Ω—Ç —Ç—ã —Ö–æ—á–µ—à—å")
		msg.ReplyMarkup = value.OrderPrint
		sendPhotoPrints(toCallback.Message.Chat.ID)
		standardSendMessage(msg)

	case "admin":
		standardCallbackCheck(*toCallback)
		msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ...")
		standardSendMessage(msg)

		NewBot.Send(tgbotapi.NewMessage(value.WLANKASPER_ID, "PROBLEM @"+toCallback.From.UserName))
		NewBot.Send(tgbotapi.NewMessage(value.ANASHARMS_ID, "PROBLEM @"+toCallback.From.UserName))

	case "octopus":
		orderSetPrint("Samurai Octopus üêô", *toCallback)

	case "shrimp":
		orderSetPrint("Samurai Shrimp ü¶ê", *toCallback)

	case "S":
		orderSetSize("S", *toCallback)

	case "M":
		orderSetSize("M", *toCallback)

	case "L":
		orderSetSize("L", *toCallback)

	case "card":
		standardCallbackCheck(*toCallback)

		OrderInfoMap[toCallback.Message.Chat.ID].Payment = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
		msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–¢–∏–Ω—å–∫–æ—Ñ—Ñ - 5536 9140 3655 4214 (–ê–Ω–∞—Å—Ç–∞—Å–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞)\n\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–æ–æ–±—â–∏—Ç –±–ª–∏–∂–∞–π—â—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")
		standardSendMessage(msg)

		msg = tgbotapi.NewMessage(value.WLANKASPER_ID, "NEW ORDER\n\nName: "+OrderInfoMap[toCallback.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[toCallback.Message.Chat.ID].Email+"\nAddress: "+OrderInfoMap[toCallback.Message.Chat.ID].ContactInfo+"\nPrint: "+OrderInfoMap[toCallback.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[toCallback.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[toCallback.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[toCallback.Message.Chat.ID].Status)
		standardSendMessage(msg)

		msg = tgbotapi.NewMessage(value.ANASHARMS_ID, "NEW ORDER\n\nName: "+OrderInfoMap[toCallback.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[toCallback.Message.Chat.ID].Email+"\nAddress: "+OrderInfoMap[toCallback.Message.Chat.ID].ContactInfo+"\nPrint: "+OrderInfoMap[toCallback.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[toCallback.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[toCallback.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[toCallback.Message.Chat.ID].Status)
		standardSendMessage(msg)
	case "busd":
		// TODO

		// ------------------------------------ CALLBACK FOR ADMIN ------------------------------------
	case "add":
		standardCallbackCheck(*toCallback)
		msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞:\nroot/–ù–ê–ó–í–ê–ù–ò–ï_–ö–û–õ–õ–ï–ö–¶–ò–ò/–†–ê–ó–ú–ï–†/–¶–í–ï–¢/–ö–û–õ–ò–ß–ï–°–¢–í–û\n\n–ü—Ä–∏–º–µ—Ä: root/–ö–†–ï–í–≠–î/S/–ß–µ—Ä–Ω—ã–π/4")
		standardSendMessage(msg)

		InputState = 1

	case "del":
		standardCallbackCheck(*toCallback)
		msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞:\nroot/–ù–ê–ó–í–ê–ù–ò–ï_–ö–û–õ–õ–ï–ö–¶–ò–ò/–†–ê–ó–ú–ï–†/–¶–í–ï–¢/–ö–û–õ–ò–ß–ï–°–¢–í–û\n\n–ü—Ä–∏–º–µ—Ä: root/–ö–†–ï–í–≠–î/S/–ß–µ—Ä–Ω—ã–π/4")
		standardSendMessage(msg)

		InputState = 2

	case "all":
		standardCallbackCheck(*toCallback)
		// 	str := tree.TreePrint(true, "", "")
		// 	if str != "" {
		// 		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, str)
		// 		standartSendMessage(msg)
		// 	} else {
		// 		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "Empty")
		// 		standartSendMessage(msg)
		// 	}
		// }
	}
}

func standardSendMessage(msg tgbotapi.MessageConfig) {
	if _, err := NewBot.Send(msg); err != nil {
		logger.ForError(err)
	}
}

func standardCallbackCheck(toCallback tgbotapi.CallbackQuery) {
	callback := tgbotapi.NewCallback(toCallback.ID, toCallback.Data)
	if _, err := NewBot.Request(callback); err != nil {
		logger.ForError(err)
	}
}

func orderSetSize(size string, toCallback tgbotapi.CallbackQuery) {
	standardCallbackCheck(toCallback)
	OrderInfoMap[toCallback.Message.Chat.ID].Size = size
	msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
	standardSendMessage(msg)

	InputState = 1
}

func orderSetPrint(print string, toCallback tgbotapi.CallbackQuery) {
	standardCallbackCheck(toCallback)
	OrderInfoMap[toCallback.Message.Chat.ID].Print = print
	msg := tgbotapi.NewMessage(toCallback.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä")
	msg.ReplyMarkup = value.OrderSize
	sendPhotoSize(toCallback.Message.Chat.ID)
	standardSendMessage(msg)
}

func sendPhotoShrimp(sendTo int64) {
	cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_shrimp)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_front)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_back)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_zoom)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_many)),
	})
	messages, err := NewBot.SendMediaGroup(cfg)

	logger.ForError(err)
	if messages == nil {
		// logger.ForString("No received messages")
	}
	if len(messages) != len(cfg.Media) {
		// logger.ForString(fmt.Sprintf("Different number of messages: %v", len(messages)))
	}
}

func sendPhotoOctopus(sendTo int64) {
	cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_octopus)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_front)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_back)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_zoom)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_many)),
	})
	messages, err := NewBot.SendMediaGroup(cfg)

	logger.ForError(err)
	if messages == nil {
		// logger.ForString("No received messages")
	}
	if len(messages) != len(cfg.Media) {
		// logger.ForString(fmt.Sprintf("Different number of messages: %v", len(messages)))
	}
}

func sendPhotoPrints(sendTo int64) {
	cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_octopus)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_many)),
	})
	messages, err := NewBot.SendMediaGroup(cfg)

	logger.ForError(err)
	if messages == nil {
		// logger.ForString("No received messages")
	}
	if len(messages) != len(cfg.Media) {
		// logger.ForString(fmt.Sprintf("Different number of messages: %v", len(messages)))
	}

	cfg = tgbotapi.NewMediaGroup(sendTo, []interface{}{
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_shrimp)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_many)),
	})
	messages, err = NewBot.SendMediaGroup(cfg)

	logger.ForError(err)
	if messages == nil {
		// logger.ForString("No received messages")
	}
	if len(messages) != len(cfg.Media) {
		// logger.ForString(fmt.Sprintf("Different number of messages: %v", len(messages)))
	}
}

func sendPhotoSize(sendTo int64) {
	cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_s)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_m)),
		tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_l)),
	})
	messages, err := NewBot.SendMediaGroup(cfg)

	logger.ForError(err)
	if messages == nil {
		// logger.ForString("No received messages")
	}
	if len(messages) != len(cfg.Media) {
		// logger.ForString(fmt.Sprintf("Different number of messages: %v", len(messages)))
	}
}
