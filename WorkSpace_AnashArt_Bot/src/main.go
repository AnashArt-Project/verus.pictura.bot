package main

// https://github.com/go-telegram-bot-api/telegram-bot-api

// ------------------- IMPORTS -------------------
import (
	"log"

	"AnashArt.bot/db"
	"AnashArt.bot/value"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ------------------- CONSTS -------------------
const botAPI = "5267887349:AAEr95a2kk8B78h5CO2yv8E-IN9W2FxERi4"

const wlankasperID = 853634511
const anasharmsID = 726736906

// const archiveChatID = 672399763

// ------------------- VARS -------------------
var OrderInfoMap map[int64]*db.OrderInfo
var InputState int = 0

var OrderSystem = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ë–æ—Ç", "telegram"),
		tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin"),
	),
)

// --------- ORDER CHOICE PRINT ---------
var OrderPrint = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Samurai Octopus üêô", "octopus"),
		tgbotapi.NewInlineKeyboardButtonData("Samurai Shrimp ü¶ê", "shrimp"),
	),
)

// --------- ORDER CHOICE SIZE ---------
var OrderSize = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("S", "S"),
		tgbotapi.NewInlineKeyboardButtonData("M", "M"),
		tgbotapi.NewInlineKeyboardButtonData("L", "L"),
	),
)

// --------- ORDER CHOICE PAYMENT ---------
var OrderPayment = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		// tgbotapi.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∞ BUSD", "busd"),
		tgbotapi.NewInlineKeyboardButtonData("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", "card"),
	),
)

// ------------------------------------ ADMIN KEYBOARDS ------------------------------------
// --------- ADMIN SETTINGS ---------
var AdminSettings = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ß—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å", "add"),
		tgbotapi.NewInlineKeyboardButtonData("–ß—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç—å", "del"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", "all"),
	),
)

func main() {

	// --------- INIT BOT ---------
	bot, err := tgbotapi.NewBotAPI(botAPI)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// tree := db.Node{}

	OrderInfoMap = make(map[int64]*db.OrderInfo)

	// --------- MESSAGE LOOP ---------
	for update := range updates {

		sendPhotoPrints := func(sendTo int64) {
			cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_octopus)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_many)),
			})
			messages, err := bot.SendMediaGroup(cfg)

			if err != nil {
				log.Panic(err)
			}

			if messages == nil {
				log.Panic("No received messages")
			}

			if len(messages) != len(cfg.Media) {
				log.Panic("Different number of messages: ", len(messages))
			}

			cfg = tgbotapi.NewMediaGroup(sendTo, []interface{}{
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_shrimp)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_many)),
			})
			messages, err = bot.SendMediaGroup(cfg)

			if err != nil {
				log.Panic(err)
			}

			if messages == nil {
				log.Panic("No received messages")
			}

			if len(messages) != len(cfg.Media) {
				log.Panic("Different number of messages: ", len(messages))
			}
		}

		sendPhotoOctopus := func() {
			cfg := tgbotapi.NewMediaGroup(update.Message.Chat.ID, []interface{}{
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_octopus)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_front)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_back)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_zoom)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_1_many)),
			})
			messages, err := bot.SendMediaGroup(cfg)

			if err != nil {
				log.Panic(err)
			}

			if messages == nil {
				log.Panic("No received messages")
			}

			if len(messages) != len(cfg.Media) {
				log.Panic("Different number of messages: ", len(messages))
			}
		}

		sendPhotoShrimp := func() {
			cfg := tgbotapi.NewMediaGroup(update.Message.Chat.ID, []interface{}{
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Full_samurai_shrimp)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_front)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_back)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_zoom)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Product_2_many)),
			})
			messages, err := bot.SendMediaGroup(cfg)

			if err != nil {
				log.Panic(err)
			}

			if messages == nil {
				log.Panic("No received messages")
			}

			if len(messages) != len(cfg.Media) {
				log.Panic("Different number of messages: ", len(messages))
			}
		}

		sendPhotoSize := func(sendTo int64) {
			cfg := tgbotapi.NewMediaGroup(sendTo, []interface{}{
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_s)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_m)),
				tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(value.Size_l)),
			})
			messages, err := bot.SendMediaGroup(cfg)

			if err != nil {
				log.Panic(err)
			}

			if messages == nil {
				log.Panic("No received messages")
			}

			if len(messages) != len(cfg.Media) {
				log.Panic("Different number of messages: ", len(messages))
			}
		}
		standartSendMessage := func(msg tgbotapi.MessageConfig) {
			if _, err = bot.Send(msg); err != nil {
				panic(err)
			}
		}

		standartCallbackCheck := func() {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}
		}

		orderSetSize := func(size string) {
			standartCallbackCheck()
			OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size = size
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
			standartSendMessage(msg)

			InputState = 1
		}

		orderSetPrint := func(print string) {
			standartCallbackCheck()
			OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print = print
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä")
			msg.ReplyMarkup = OrderSize
			sendPhotoSize(update.CallbackQuery.Message.Chat.ID)
			standartSendMessage(msg)
		}

		if update.Message != nil {
			// ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ ----------
			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "start":
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, value.Menu)
					standartSendMessage(msg)
				case "show":
					sendPhotoOctopus()
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Samurai Octopus üêô")
					bot.Send(msg)

					sendPhotoShrimp()
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "Samurai Shrimp ü¶ê")
					bot.Send(msg)

				case "price":
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, value.Price)
					standartSendMessage(msg)

				case "size":
					sendPhotoSize(update.Message.Chat.ID)

				case "order":
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ –ª–∏–±–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
					msg.ReplyMarkup = OrderSystem
					standartSendMessage(msg)
				case "help":
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ...")
					standartSendMessage(msg)

					bot.Send(tgbotapi.NewMessage(wlankasperID, "PROBLEM @"+update.Message.From.UserName))
					bot.Send(tgbotapi.NewMessage(anasharmsID, "PROBLEM @"+update.Message.From.UserName))

				case "admin":
					if update.Message.Chat.ID == wlankasperID || update.Message.Chat.ID == anasharmsID {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç –ù–∞—Å—Ç—å)")
						msg.ReplyMarkup = AdminSettings
						standartSendMessage(msg)
					}
				}
			} else if InputState != 0 {
				switch InputState {
				// --------- EMAIL---------
				case 1:
					OrderInfoMap[update.Message.Chat.ID].Email = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ì–æ—Ä–æ–¥,   –£–ª–∏—Ü–∞,   –î–æ–º,   –ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞_–¥–ª—è_—Å–≤—è–∑–∏")
					standartSendMessage(msg)
					InputState = 2

				// --------- ADDRESS---------
				case 2:
					OrderInfoMap[update.Message.Chat.ID].ContactInfo = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n–í–∞—à –∑–∞–∫–∞–∑:\n–ü—Ä–∏–Ω—Ç - "+OrderInfoMap[update.Message.Chat.ID].Print+"\n–†–∞–∑–º–µ—Ä - "+OrderInfoMap[update.Message.Chat.ID].Size+"\nEmail - "+OrderInfoMap[update.Message.Chat.ID].Email+"\n–î–æ—Å—Ç–∞–≤–∫–∞ - "+OrderInfoMap[update.Message.Chat.ID].ContactInfo)
					msg.ReplyMarkup = OrderPayment
					standartSendMessage(msg)

					InputState = 0
				}

			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(")
				standartSendMessage(msg)
			}
		}

		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {

			case "telegram":
				standartCallbackCheck()

				OrderInfoMap[update.CallbackQuery.Message.Chat.ID] = new(db.OrderInfo)
				OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName = update.CallbackQuery.From.UserName

				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã–±–∏—Ä–∞–π –∫–∞–∫–æ–π –ø—Ä–∏–Ω—Ç —Ç—ã —Ö–æ—á–µ—à—å")
				msg.ReplyMarkup = OrderPrint
				sendPhotoPrints(update.CallbackQuery.Message.Chat.ID)
				standartSendMessage(msg)

			case "admin":
				standartCallbackCheck()
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ...")
				standartSendMessage(msg)

				bot.Send(tgbotapi.NewMessage(wlankasperID, "PROBLEM @"+update.Message.From.UserName))
				bot.Send(tgbotapi.NewMessage(anasharmsID, "PROBLEM @"+update.Message.From.UserName))

			case "octopus":
				orderSetPrint("Samurai Octopus üêô")

			case "shrimp":
				orderSetPrint("Samurai Shrimp ü¶ê")

			case "S":
				orderSetSize("S")

			case "M":
				orderSetSize("M")

			case "L":
				orderSetSize("L")

			case "card":
				standartCallbackCheck()

				OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–¢–∏–Ω—å–∫–æ—Ñ—Ñ - 5536 9140 3655 4214 (–ê–Ω–∞—Å—Ç–∞—Å–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞)\n\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–æ–æ–±—â–∏—Ç –±–ª–∏–∂–∞–π—â—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")
				standartSendMessage(msg)

				msg = tgbotapi.NewMessage(wlankasperID, "NEW ORDER\n\nName: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Email+"\nAddress: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].ContactInfo+"\nPrint: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Status)
				standartSendMessage(msg)

				msg = tgbotapi.NewMessage(anasharmsID, "NEW ORDER\n\nName: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Email+"\nAddress: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].ContactInfo+"\nPrint: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Status)
				standartSendMessage(msg)
			case "busd":
				// TODO

				// ------------------------------------ CALLBACK FOR ADMIN ------------------------------------
			case "add":
				standartCallbackCheck()
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞:\nroot/–ù–ê–ó–í–ê–ù–ò–ï_–ö–û–õ–õ–ï–ö–¶–ò–ò/–†–ê–ó–ú–ï–†/–¶–í–ï–¢/–ö–û–õ–ò–ß–ï–°–¢–í–û\n\n–ü—Ä–∏–º–µ—Ä: root/–ö–†–ï–í–≠–î/S/–ß–µ—Ä–Ω—ã–π/4")
				standartSendMessage(msg)

				InputState = 1

			case "del":
				standartCallbackCheck()
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞:\nroot/–ù–ê–ó–í–ê–ù–ò–ï_–ö–û–õ–õ–ï–ö–¶–ò–ò/–†–ê–ó–ú–ï–†/–¶–í–ï–¢/–ö–û–õ–ò–ß–ï–°–¢–í–û\n\n–ü—Ä–∏–º–µ—Ä: root/–ö–†–ï–í–≠–î/S/–ß–µ—Ä–Ω—ã–π/4")
				standartSendMessage(msg)

				InputState = 2

			case "all":
				standartCallbackCheck()
				// 	str := tree.TreePrint(true, "", "")
				// 	if str != "" {
				// 		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, str)
				// 		standartSendMessage(msg)
				// 	} else {
				// 		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "Empty")
				// 		standartSendMessage(msg)
				// 	}
				// }
			}
		}
	}
}
